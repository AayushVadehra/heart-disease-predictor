# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1erZDIcnzXZdTc_k17zxKrJzbJ0-Se9cR

Importing the dependencyes
"""

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

"""Data Collection and Processing"""

#loading the csv file into pandas dataframe
heart_data = pd.read_csv('/content/Heart_Disease_Prediction.csv')

#print first five rows of the data
heart_data.head()

heart_data.tail()

#number of coloumns and rows in the data set
heart_data.shape

#Getting some information about the data
heart_data.info()

#Check for missing values
heart_data.isnull().sum()

#statistical measures about the data
heart_data.describe()

#checking the distibution of target variable
heart_data['Heart Disease'].value_counts()

""" splitting the features and heart disease"""

X = heart_data.drop(columns='Heart Disease', axis=1)
Y = heart_data['Heart Disease']

print(X)

print(Y)

"""Splitting the data into training data and testing data"""

X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2, stratify=Y, random_state=2)

print(X.shape , X_train.shape , X_test.shape)

"""Model training

Logistic regression
"""

model= LogisticRegression()

#training the logistic model with the training data
model.fit(X_train, Y_train)

"""Model Evaluation

Accuracy Score
"""

#accuracy on training data
X_train_prediction = model.predict(X_train)
training_data_accuracy = accuracy_score(X_train_prediction, Y_train)

print("accuracy on training data :" , training_data_accuracy)

#accuracy on test data
X_test_prediction = model.predict(X_test)
test_data_accuracy = accuracy_score(X_test_prediction, Y_test)

print("accuracy on test data :" , test_data_accuracy)

"""Building a predictive system"""

input_data = (42, 1, 6, 100, 300, 1, 2, 109, 1, 2.4, 3, 2, 2)

#change the input data to numpy array
input_data_as_numpy_array = np.asarray(input_data)

#reshape the numpy array as we are predicting for only one instance
input_data_reshaped = input_data_as_numpy_array.reshape(1,-1)

prediction = model.predict(input_data_reshaped)
print(prediction)

if (prediction[0]=="Presence"):
  print("The person has heart disease")
else:
  print("The person does not have heart disease")

